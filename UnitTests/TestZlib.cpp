#include "pch.h"
#include "../LearningOpenGL/Zlib.h"
#include <random>

using namespace trv;


std::random_device rd;
std::mt19937 mt(rd());
std::uniform_int_distribution<unsigned short> byteDist(0x00, 0xFF);
std::uniform_int_distribution<unsigned short> bitLenDist(0, 16);

constexpr unsigned int REPETITIONS = 1;

//template<std::integral T>
//T simple_consume_bits_msb(const char* input, unsigned char bits)
//{
//	T val = 0;
//
//	for (unsigned int bit = 0; bit < bits; ++bit)
//	{
//		input |= 
//	}
//
//	return val;
//}

TEST(TestZlib, TestDeflate)
{
#pragma warning ( suppress: 4838 4309)
	char data[] = { 0x58, 0xc3,0xed, 0x58, 0xdb, 0x0d, 0xc3, 0x20, 0x0c, 0x04, 0x94, 0x59, 0x9a, 0x4a, 0xec, 0x96, 0x61, 0xba, 0x1b, 0x52, 0x9a, 0x65, 0xe8, 0x4f, 0x91, 0x8c, 0x8b, 0xc1, 0xe6, 0xd1, 0xa0, 0x28, 0x48, 0xf9, 0x08, 0xc2, 0xe4, 0xb8, 0x3b, 0x1b, 0x88, 0xf6, 0xde, 0x7b, 0x35, 0x41, 0x33, 0x6a, 0x92, 0x36, 0x0d, 0x90, 0xa5, 0x25, 0xd8, 0xed, 0x47, 0xf4, 0x6e, 0x9f, 0x8f, 0xf3, 0x18, 0xb1, 0xdb, 0xaa, 0xec, 0xb6, 0x9e, 0x27, 0x0d, 0x66, 0x83, 0xea, 0xe3, 0x36, 0x2d, 0xc9, 0x9a, 0x1f, 0x29, 0x10, 0x13, 0xee, 0xf5, 0xae, 0x96, 0xca, 0xf4, 0x96, 0xa2, 0x56, 0x2a, 0xd3, 0xe2, 0x0d, 0x4e, 0xdf, 0xf5, 0xd2, 0xb7, 0xc5, 0x80, 0x30, 0xb6, 0xe4, 0x17, 0x83, 0x03, 0xe1, 0x93, 0xa2, 0x1c, 0x1b, 0x32, 0x09, 0x20, 0x8c, 0x89, 0x62, 0x89, 0xf9, 0x93, 0xd2, 0x40, 0xb3, 0x51, 0x60, 0x6a, 0x7c, 0x14, 0xe6, 0xa2, 0xcc, 0x1c, 0xa5, 0x2f, 0x1c, 0x9c, 0x5b, 0x6d, 0x09, 0x54, 0x69, 0x4c, 0x60, 0x0c, 0xca, 0x65, 0xa4, 0x79, 0xcf, 0x61, 0x86, 0x35, 0x06, 0x7d, 0x6b, 0xce, 0xdd, 0x37, 0x48, 0xc3, 0x31, 0x64, 0x75, 0x26, 0x7d, 0xe7, 0xc6, 0x66, 0x5d, 0x7a, 0x16, 0x25, 0x89, 0x81, 0xf1, 0x62, 0x4d, 0x2e, 0xf5, 0x46, 0xb3, 0x42, 0x02, 0x09, 0x06, 0xfa, 0x87, 0x34, 0x45, 0xb3, 0x8e, 0x04, 0x43, 0x81, 0xc8, 0x1e, 0x03, 0x5a, 0x8b, 0x19, 0x59, 0x69, 0x89, 0x12, 0x51, 0x3c, 0x8f, 0x70, 0x8a, 0x5c, 0x2d, 0x0b, 0xa2, 0x3a, 0xd2, 0x22, 0x15, 0x17, 0x84, 0xa8, 0xa0, 0xb5, 0xee, 0x35, 0x5d, 0x4f, 0xf1, 0x29, 0x56, 0xa8, 0xba, 0x30, 0x0c, 0x48, 0x8a, 0xe6, 0xdc, 0x75, 0xc2, 0xed, 0x87, 0x48, 0x4e, 0x16, 0x90, 0x9a, 0xfb, 0x8a, 0x34, 0xe6, 0xbe, 0x72, 0x5e, 0xf3, 0xee, 0xdb, 0x73, 0x2b, 0xd0, 0xf7, 0xff, 0x11, 0xd4, 0x3e, 0x8e, 0xee, 0xa7, 0x58, 0x70, 0xca, 0x24, 0x84 };
	//char data[] = { 0x58, 0xc3, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0xad };
	std::vector<unsigned char> output;
	DeflateArgs args{true, output};
	
	decompress(&data[0], args);
}

TEST(TestZlib, TestPeekBits)
{
	std::vector<unsigned char> input1 = { 0b11001000, 0b10000100 };
	std::vector<char> input2;
	
	for (const auto& i : input1)
	{
		input2.push_back(std::bit_cast<char>(i));
	}


	char* pInput = input2.data();

	uint16_t output = peek_bits_msb<uint16_t>(&pInput, 4);
	EXPECT_EQ(output, 0b0001);

	output = peek_bits_msb<uint16_t>(&pInput, 7);
	EXPECT_EQ(output, 0b0001001);

	output = peek_bits_msb<uint16_t>(&pInput, 10);
	EXPECT_EQ(output, 0b0000010011);

	output = peek_bits_msb<uint16_t>(&pInput, 16);
	EXPECT_EQ(output, 0b00010011001000001);
}

TEST(TestZlib, TestConsecutivePeekBits)
{
	std::vector<char> input(2);

	for (int runs = 0; runs < REPETITIONS; ++runs)
	{
		input[0] = (unsigned char)byteDist(mt);
		input[1] = (unsigned char)byteDist(mt);
	}
	
	char* pInput = input.data();
	unsigned char bits = (unsigned char)bitLenDist(mt);

	uint16_t output = peek_bits_msb<uint16_t>(&pInput, bits);
	uint16_t output2 = peek_bits_msb<uint16_t>(&pInput, bits);


	EXPECT_EQ(output, output2);
}

TEST(TestZlib, TestConsumeBitsMSB)
{
	std::vector<bool> bits;

	

	std::vector<unsigned char> output;
	DeflateArgs args{ true, output };

	//decompress(&data[0], args);
}